#ifndef SURFEL_INTERSECTION_TESTS
#define SURFEL_INTERSECTION_TESTS
#include "catch/catch.hpp" // includes catch from the third party folder

// include all headers needed for your tests below here
#include <lamure/xyz/surfel.h>
#include <vector>


//not the case anymore since the normals are jittered now
/*
TEST_CASE( "Two parallel surfels with a position offset along their normal should not intersect",
		   "[surfel_intersection]" ) {

	lamure::xyz::surfel surfel_1, surfel_2;

	surfel_1.normal() = lamure::vec3f_t(1.0f, 0.0f, 0.0f);
	surfel_1.pos() = lamure::vec3r_t(0.0, 0.0, 0.0);
	surfel_1.radius() = 1.0;

	surfel_2.normal() = lamure::vec3f_t(1.0f, 0.0f, 0.0f);
	surfel_2.pos() = lamure::vec3r(0.000001, 0.0, 0.0);
	surfel_2.radius() = 1.0;

	bool did_intersect = lamure::xyz::surfel::intersect(surfel_1, surfel_2);

	REQUIRE(did_intersect == false);

}
*/

TEST_CASE( "Two parallel surfels with a position offset on the non normal axes with sufficiently large radius should intersect",
		   "[surfel_intersection]" ) {

	lamure::xyz::surfel surfel_1, surfel_2;

	surfel_1.normal() = lamure::vec3f_t(1.0f, 0.0f, 0.0f);
	surfel_1.pos() = lamure::vec3r_t(0.0, 0.0, 0.0);
	surfel_1.radius() = 1.0;

	surfel_2.normal() = lamure::vec3f_t(1.0f, 0.0f, 0.0f);
	surfel_2.pos() = lamure::vec3r_t(0.0, 1.999, 0.0);
	surfel_2.radius() = 1.0;

	bool did_intersect = lamure::xyz::surfel::intersect(surfel_1, surfel_2);

	REQUIRE(did_intersect == true);
}

TEST_CASE( "Two parallel surfels with a position offset on the non normal axes with insufficient radius should not intersect",
		   "[surfel_intersection]" ) {

	lamure::xyz::surfel surfel_1, surfel_2;

	surfel_1.normal() = lamure::vec3f_t(1.0f, 0.0f, 0.0f);
	surfel_1.pos() = lamure::vec3r_t(0.0, 0.0, 0.0);
	surfel_1.radius() = 1.0;

	surfel_2.normal() = lamure::vec3f_t(1.0f, 0.0f, 0.0f);
	surfel_2.pos() = lamure::vec3r_t(0.0, 2.01, 0.0);
	surfel_2.radius() = 1.0;

	bool did_intersect = lamure::xyz::surfel::intersect(surfel_1, surfel_2);

	REQUIRE(did_intersect == false);
}

TEST_CASE( "Two non parallel surfels with sufficiently large radius should intersect",
		   "[surfel_intersection]" ) {

	lamure::xyz::surfel surfel_1, surfel_2;

	surfel_1.normal() = lamure::vec3f_t(1.0f, 0.0f, 0.0f);
	surfel_1.pos() = lamure::vec3r_t(0.0, 0.0, 0.0);
	surfel_1.radius() = 1.001;

	surfel_2.normal() = lamure::vec3f_t(0.0f, 1.0f, 0.0f);
	surfel_2.pos() = lamure::vec3r_t(1.0, 0.0, 0.0);
	surfel_2.radius() = 1.001;

	bool did_intersect = lamure::xyz::surfel::intersect(surfel_1, surfel_2);

	REQUIRE(did_intersect == true);
}

TEST_CASE( "Two non parallel surfels with too small radius should intersect",
		   "[surfel_intersection]" ) {

	lamure::xyz::surfel surfel_1, surfel_2;

	surfel_1.normal() = lamure::vec3f_t(1.0f, 0.0f, 0.0f);
	surfel_1.pos() = lamure::vec3r_t(0.0, 0.0, 0.0);
	surfel_1.radius() = 1.00;

	surfel_2.normal() = lamure::vec3f_t(0.0f, 1.0f, 0.0f);
	surfel_2.pos() = lamure::vec3r_t(2.0, 0.0, 0.0);
	surfel_2.radius() = 1.000;

	bool did_intersect = lamure::xyz::surfel::intersect(surfel_1, surfel_2);

	REQUIRE(did_intersect == false);

}

TEST_CASE( "Real Life Artificial Plane Example",
		   "[surfel_intersection]" ) {

	lamure::xyz::surfel surfel_1, surfel_2;

	surfel_1.normal() = lamure::vec3f_t(0.363, 0.765, -0.532);
	surfel_1.pos() = lamure::vec3r_t(-1.005, 0.465, -0.017);
	surfel_1.radius() = 0.066680;

	surfel_2.normal() = lamure::vec3f_t(0.363, 0.765, -0.532);
	surfel_2.pos() = lamure::vec3r_t(-0.998, 0.445,  -0.041);
	surfel_2.radius() = 0.066680;

	bool did_intersect = lamure::xyz::surfel::intersect(surfel_1, surfel_2);

	REQUIRE(did_intersect == true);


	lamure::xyz::surfel artificial_surfel;

	artificial_surfel.pos() = lamure::vec3r_t(0.0, 10.0, 0.0);
	artificial_surfel.normal() = lamure::math::normalize(lamure::vec3f_t(1.0, 1.0, 0.0));
	artificial_surfel.radius() = 5;

	for(int i = 0; i < 1000; ++i) {
		//std::cout << artificial_surfel.random_point_on_surfel() << "\n";
	}

}


#endif
